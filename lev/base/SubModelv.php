<?php
/* 
 * Copyright (c) 2018-2021   All rights reserved.
 * 
 * 创建时间：2021-11-13 20:00
 *
 * 项目：rm  -  $  - SubModelv.php
 *
 * 作者：liwei 
 */

namespace lev\base;

use Lev;
use lev\helpers\dbHelper;
use lev\helpers\subTableHelper;

!defined('INLEV') && exit('Access Denied LEV');


class SubModelv extends Modelv
{

    public static function total($where, $sub = null) // TODO: Change the autogenerated stub
    {
        return static::totalSub($where, $sub);
    }

    public static function delete($condition, $limit = 0, $sub = null) // TODO: Change the autogenerated stub
    {
        return static::deleteSub($condition, $limit, $sub);
    }

    public static function update($data, $condition = '', $sub = null) // TODO: Change the autogenerated stub
    {
        return static::updateSub($data, $condition, $sub);
    }

    public static function insert($data, $returnInsertId = false, $sub = null) // TODO: Change the autogenerated stub
    {
        return static::insertSub($data, $returnInsertId, $sub);
    }

    public static function findAll($where, $keyfield = '', $order = [], $field = '*', $sub = null) // TODO: Change the autogenerated stub
    {
        return static::findAllSub($where, $keyfield, $order, $field, $sub);
    }

    public static function findOne($where, $field = '*', $sub = null) // TODO: Change the autogenerated stub
    {
        return static::findOneSub($where, $field, $sub);
    }

    public static function findOneSub($where, $field = '*', $sub = null) {
        $tabName = static::tableName();

        $result = [];
        if ($sub !== null) {
            static::$tableName = $sub;
        }else if (is_array($where) && isset($where['id'])) {
            static::$tableName = subTableHelper::getSubNameById(static::$tableName, $where['id']);
        }else {
            $subs = subTableHelper::getSubTablesCache(static::$tableName);
            if ($subs) {
                foreach ($subs as $v) {
                    static::$tableName = $v['subName'];
                    if ($result = parent::findOne($where, $field)) {
                        break;
                    }
                }
            }

        }
        empty($subs) && $result = parent::findOne($where, $field);

        static::$tableName = $tabName;

        return $result;
    }

    public static function findAllSub($where, $keyfield = '', $order = [], $field = '*', $sub = null)
    {
        $tabName = static::tableName();

        $result = [];
        if ($sub !== null) {
            static::$tableName = $sub;
        }else {
            $subs = subTableHelper::getSubTablesCache(static::$tableName);
            if ($subs) {
                $fullSql = static::getFullSql($where, $order, $field);
                $limit = static::getLimitNumber($fullSql);
                $offset = static::getOffsetNumber($fullSql);
                if ($offset) {
                    $subs[0]['dataRows'] = static::totalSub(explode(' OFFSET ', strtoupper($where))[0], $subs[0]['subName']);
                }
                $subs[] = $subs[0];
                unset($subs[0]);
                stripos($fullSql, 'id DESC') && krsort($subs);
                $total = 0;
                foreach ($subs as $k => $v) {
                    if ($offset) {
                        $total += $v['dataRows'];
                        if (!isset($_offset)) {
                            if ($total < $offset) {
                                continue;
                            }
                            $_offset = $offset + $v['dataRows'] - $total;
                            $where = str_ireplace(' OFFSET ' . $offset, ' OFFSET ' . $_offset, $where);
                        }else {
                            $where = str_ireplace(' OFFSET ' . $_offset, ' OFFSET 0', $where);
                        }
                    }
                    static::$tableName = $v['subName'];
                    if ($res = parent::findAll($where, $keyfield, $order, $field)) {
                        $result = array_merge($result, $res);
                        $count = count($result);
                        if ($limit && $count >= $limit) {
                            $result = array_slice($result, 0, $limit, true);
                            break;
                        }
                    }
                }
            }
        }
        empty($subs) && $result = parent::findAll($where, $keyfield, $order, $field);

        static::$tableName = $tabName;

        return $result;
    }

    public static function updateSub($data, $condition = '', $sub = null)
    {
        $tabName = static::tableName();

        $result = true;
        if ($sub !== null) {
            static::$tableName = $sub;
        }else if (is_array($condition) && isset($condition['id'])) {
            static::$tableName = subTableHelper::getSubNameById(static::$tableName, $condition['id']);
        }else {
            $subs = subTableHelper::getSubTablesCache(static::$tableName);
            if ($subs) {
                foreach ($subs as $v) {
                    static::$tableName = $v['subName'];
                    $result = parent::update($data, $condition);
                }
            }
        }
        empty($subs) && $result = parent::update($data, $condition);

        static::$tableName = $tabName;

        return $result;
    }

    public static function insertSub($data, $returnInsertId = false, $sub = null)
    {
        $tabName = static::tableName();

        if ($sub !== null) {
            static::$tableName = $sub;
        }else if (is_array($data) && isset($data['id'])) {
            static::$tableName = subTableHelper::getSubNameById(static::$tableName, $data['id']);
        }
        $result = parent::insert($data, $returnInsertId);

        static::$tableName = $tabName;

        return $result;
    }

    public static function totalSub($where, $sub = null)
    {
        $tabName = static::tableName();

        $total = 0;
        if ($sub !== null) {
            static::$tableName = $sub;
        }else {
            $subs = subTableHelper::getSubTablesCache(static::$tableName);
            if ($subs) {
                unset($subs[0]);
                $srh = $where != '1' || is_array($where) || stripos($where, '=') !== false || stripos($where, 'like') !== false;
                $total += parent::total($where);
                foreach ($subs as $v) {
                    if ($srh) {
                        static::$tableName = $v['subName'];
                        $total += parent::total($where);
                    } else {
                        $total += $v['dataRows'];
                    }
                }
            }
        }
        empty($subs) && $total = parent::total($where);

        static::$tableName = $tabName;

        return $total;
    }

    public static function deleteSub($condition, $limit = 0, $sub = null)
    {
        $tabName = static::tableName();

        if ($sub !== null) {
            static::$tableName = $sub;
        }else if (is_array($condition) && isset($condition['id'])) {
            static::$tableName = subTableHelper::getSubNameById(static::$tableName, $condition['id']);
        }else {
            $subs = subTableHelper::getSubTablesCache(static::$tableName);
            if ($subs) {
                foreach ($subs as $v) {
                    static::$tableName = $v['subName'];
                    parent::delete($condition, $limit);
                }
            }
        }
        empty($subs) && parent::delete($condition, $limit);

        static::$tableName = $tabName;//分表操作完成，还原模型主表

        return true;
    }

    public static function getLimitNumber($sql) {
        $num = 0;
        if (!is_array($sql) && stripos($sql, 'LIMIT ') !== false) {
            $num = floatval(explode('LIMIT ', strtoupper($sql))[1]);
        }
        return $num;
    }

    public static function getOffsetNumber($sql) {
        $num = 0;
        if (!is_array($sql) && stripos($sql, 'OFFSET ') !== false) {
            $num = floatval(explode('OFFSET ', strtoupper($sql))[1]);
        }
        return $num;
    }
}